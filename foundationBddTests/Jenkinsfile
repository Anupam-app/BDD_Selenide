pipeline {
    agent {
        label 'bddtests'
    }
    tools {
        maven 'apache-maven-3.6.3'
        jdk 'java_11'
    }
	options {
        timestamps()
        buildDiscarder(logRotator(artifactNumToKeepStr: '5'))
    }
	stages {
		stage('Initialize') {
            steps {
                script {
                    notifyBitbucket(buildStatus: 'INPROGRESS')
                }
                rtMavenResolver(
					id: "MAVEN_RESOLVER",
					serverId: "PRODArtifactory",
					releaseRepo: "bio4c-repository-dev",
					snapshotRepo: "bio4c-repository-dev"
                )
            }
        }
		stage('Clean target resources path') {
            steps {
				winRMClient(
					hostName: "${env.CIPHostName}",
					credentialsId: "${env.CredentialsId}",
					winRMOperations: [
						invokeCommand('cmd /C if exist '+env.targetResourcesPath+' rd /q /s '+env.targetResourcesPath)
					]
				)
            }
        }
		stage('Transfer test resources') {
            steps {
				script{
					withCredentials([usernamePassword(credentialsId: "${env.CredentialsId}", usernameVariable: 'user', passwordVariable: 'password')])
					{
						powershell '''
					    $user = $env:user
					    $password = $env:password
						$sourcePath="$env:WORKSPACE\\foundationBddTests\\src\\test\\resources\\"

						$SecurePassword = $password | ConvertTo-SecureString -AsPlainText -Force
						$cred = New-Object System.Management.Automation.PSCredential -ArgumentList $user, $SecurePassword						

						$Session = New-PSSession -ComputerName "$env:CIPHostName" -Credential $cred
						
						Copy-Item -Path "$sourcePath" -Destination "$env:targetResourcesPath" -ToSession $Session -Recurse -force						
						'''
					}
				}
            }
        }
		stage('Initialize Database') {
            steps {
				winRMClient(
					hostName: "${env.CIPHostName}",
					credentialsId: "${env.CredentialsId}",
					winRMOperations: [
						invokeCommand(env.targetResourcesPath+'/playAllSqlScripts.ps1 '+env.CIPHostName+' '+env.targetResourcesPath+'/sqlscripts/common'),
						invokeCommand(env.targetResourcesPath+'/playAllSqlScripts.ps1 '+env.CIPHostName+' '+env.targetResourcesPath+'/sqlscripts/'+env.PDP)
					]
				)
            }
        }
		stage('Initialize With Ps Scripts') {
            steps {
				script {
					winRMClient(
						hostName: "${env.CIPHostName}",
						credentialsId: "${env.CredentialsId}",
						winRMOperations: [
							invokeCommand(env.targetResourcesPath+'/playAllExecutableScriptsLocal.ps1 '+env.targetResourcesPath+'/executablescripts/common'),
							invokeCommand(env.targetResourcesPath+'/playAllExecutableScriptsLocal.ps1 '+env.targetResourcesPath+'/executablescripts/'+env.PDP),
						]
					)
                }				
            }
        }
        stage ('Change consul portal configuration to be seen as local server') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${env.CredentialsId}", usernameVariable: 'user', passwordVariable: 'password')])
                {
                    powershell '''
                    if(!($env:CIPHostName.ToUpper() -like 'ONEBIOP*' -or $env:CIPHostName.ToUpper() -like 'STLBIOP*'))
                    {
                        echo 'SKIP change consul portal'
                        return
                    }

                    $hostname = hostname.exe
                    $ipTarget= Resolve-DNSName $hostname -type A | Select -ExpandProperty IPAddress

                    $user = $env:user
                    $password = $env:password

                    $SecurePassword = $password | ConvertTo-SecureString -AsPlainText -Force
                    $cred = New-Object System.Management.Automation.PSCredential -ArgumentList $user, $SecurePassword

                    $Session = New-PSSession -ComputerName "$env:CIPHostName" -Credential $cred

                    function changeConsulConfig {
                        Param (
                            $IpTarget
                        )
                        $content = Invoke-WebRequest -Uri "http://localhost:8500/v1/kv/config/bio4c-portal/data?dc=foundation" | Select -ExpandProperty Content
                        $convertedJson = ConvertFrom-Json -InputObject $content
                        $convertedJsonDecode64 = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($convertedJson.value))

                        if(!($convertedJsonDecode64 -like "*$IpTarget*")){
                            $contentReplaced = $convertedJsonDecode64.replace('- 127.0.0.1',"- 127.0.0.1`r`n    - $IpTarget")
                            echo $contentReplaced
                            $headers = @{}
                            $headers["Content-Type"] = "application/json"
                            Invoke-WebRequest -Uri "http://localhost:8500/v1/kv/config/bio4c-portal/data?dc=foundation" -Body $contentReplaced -ContentType "application/json" -Headers $headers -Method Put
                            sc.exe start "CODESYS Control Win V3 - x64"
							Stop-Service bio4c-portal
                            Start-Service bio4c-portal
                        }
                    }

                    Invoke-Command -Session $Session -ScriptBlock ${Function:changeConsulConfig} -ArgumentList $ipTarget
                    '''
                }
            }
        }
        stage ('Wait for environment availability') {
            steps {
                retry(30) {
                    sh '''
                    sleep 30
                    curl -k --fail https://$CIPHostName/alarm-management/actuator/health
                    curl -k --fail https://$CIPHostName/analytics/actuator/health
                    curl -k --fail https://$CIPHostName/useradminportal/actuator/health
                    curl -k --fail https://$CIPHostName/config-management/actuator/health
                    curl -k --fail https://$CIPHostName/recipe-management/actuator/health
                    curl -k --fail https://$CIPHostName/reportingmanagement/actuator/health
                    curl -k --fail https://$CIPHostName/trends/actuator/health
                    '''
                }
            }
        }
        stage('Test able to login') {
            steps {
                script {
                    rtMavenRun(
                        tool: 'apache-maven-3.6.3',
                        pom: 'foundationBddTests/pom.xml',
                        goals: 'clean test -Dneodymium.url.host=' + env.CIPHostName + ' -Dcucumber.filter.tags="@LOGIN" -DtestFailureIgnoreProp=false',
                        resolverId: "MAVEN_RESOLVER"
                    )
                }
            }
        }
        stage('Test all bdd tests') {
			steps {
                script {
                    def commandTag = '';

                    if(env.MODE != null && env.MODE != ''){
                        commandTag=' -Dcucumber.filter.tags="@'+env.MODE+'"'
                    }
                    else{
                        commandTag = ' -Dcucumber.filter.tags="@COMMON or @'+env.PDP
                        if(env.PDP != 'CRS'){
                            def response = httpRequest(url:'https://' + env.CIPHostName + '/api/features', ignoreSslErrors: true)
                            if(response.status==200){
                               def jsonResponse = readJSON text: response.content

                               jsonResponse.features.each{val->
                                    commandTag+=' or @'+val
                                }

                            }
                        }
                        commandTag+='"'
                    }
					
					commandTag+=' -DtestFailureIgnoreProp=true'

                    println('commandTag: '+commandTag)

                    rtMavenRun(
                        tool: 'apache-maven-3.6.3',
                        pom: 'foundationBddTests/pom.xml',
                        goals: 'clean test -Dneodymium.url.host=' + env.CIPHostName + commandTag,
                        resolverId: "MAVEN_RESOLVER"
                    )
				}
			}
		}
		stage('Get version of the softwares') {
			steps {
                script {
					def versionResponse = httpRequest(url:'https://' + env.CIPHostName + '/api/v1/version/application', ignoreSslErrors: true)
					if(versionResponse.status==200){
					   def jsonVersionResponse = readJSON text: versionResponse.content
						
					   SystemITVersion=jsonVersionResponse.system
					   FoundationITVersion=jsonVersionResponse.foundation
					}
				}
			}
		}
		stage("Generate Allure Reports") {
			steps {
				script {	
					dir ('foundationBddTests/target') {
						allure([
                            includeProperties: false,
                            jdk: '',
                            properties: [],
                            reportBuildPolicy: 'ALWAYS',
                            results: [[path: 'allure-results']]
						])
					}
				}                
			}
		}
	}
	post {
        always {
            script {
                currentBuild.result = currentBuild.result ?: 'SUCCESS'
                notifyBitbucket(considerUnstableAsSuccess: true)
            }
            emailext (
                body: '''${SCRIPT, template="bddtests-allure-report.groovy"}''',
                mimeType: 'text/html',
                replyTo: '$DEFAULT_REPLYTO',
                subject: '$DEFAULT_SUBJECT',
                to: '${EmailTo}'
            )
        }
    }
}