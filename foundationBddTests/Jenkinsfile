pipeline {
    agent {
        label 'bddtests'
    }
    tools {
        maven 'apache-maven-3.6.3'
        jdk 'java_11'
    }
	options {
        timestamps()
        buildDiscarder(logRotator(artifactNumToKeepStr: '5'))
    }
	stages {
		stage('Initialize') {
            steps {
                script {
                    notifyBitbucket(buildStatus: 'INPROGRESS')
                }
                rtMavenResolver(
					id: "MAVEN_RESOLVER",
					serverId: "PRODArtifactory",
					releaseRepo: "bio4c-repository-dev",
					snapshotRepo: "bio4c-repository-dev"
                )
            }
        }
		stage('Clean target resources path') {
            steps {
				winRMClient(
					hostName: "${env.CipHostname}",
					credentialsId: "${env.CredentialsId}",
					winRMOperations: [
						invokeCommand('cmd /C if exist '+env.targetResourcesPath+' rd /q /s '+env.targetResourcesPath)
					]
				)
            }
        }
		stage('Transfer test resources') {
            steps {
				script{
					withCredentials([usernamePassword(credentialsId: "${env.CredentialsId}", usernameVariable: 'user', passwordVariable: 'password')])
					{
						powershell '''
					    $user = $env:user
					    $password = $env:password
						$sourcePath="$env:WORKSPACE\\foundationBddTests\\src\\test\\resources\\"

						$SecurePassword = $password | ConvertTo-SecureString -AsPlainText -Force
						$cred = New-Object System.Management.Automation.PSCredential -ArgumentList $user, $SecurePassword						

						$Session = New-PSSession -ComputerName "$env:CipHostname" -Credential $cred
						
						Copy-Item -Path "$sourcePath" -Destination "$env:targetResourcesPath" -ToSession $Session -Recurse -force						
						'''
					}
				}
            }
        }
		stage('Initialize Database') {
            steps {
				winRMClient(
					hostName: "${env.CipHostname}",
					credentialsId: "${env.CredentialsId}",
					winRMOperations: [
						invokeCommand(env.targetResourcesPath+'/playAllSqlScripts.ps1 '+env.CipHostname+' '+env.targetResourcesPath+'/sqlscripts')
					]
				)
            }
        }
		stage('Initialize With Ps Scripts') {
            steps {
				script {
					winRMClient(
						hostName: "${env.CipHostname}",
						credentialsId: "${env.CredentialsId}",
						winRMOperations: [
							invokeCommand(env.targetResourcesPath+'/playAllExecutableScriptsLocal.ps1 '+env.targetResourcesPath+'/executablescripts')
						]
					)
                }				
            }
        }
		stage('Smoke Tests') {
			steps {
                script {
					rtMavenRun(
						tool: 'apache-maven-3.6.3',
						pom: 'foundationBddTests/pom.xml',
						goals: 'clean test -Dcucumber.filter.tags=@smoke_test -Dneodymium.url.host=' + env.CipHostname,
						resolverId: "MAVEN_RESOLVER"
					)
				}
			}
		}
        stage('Test all bdd tests') {
			steps {
                script {
					rtMavenRun(
						tool: 'apache-maven-3.6.3',
						pom: 'foundationBddTests/pom.xml',
						goals: 'clean test -Dneodymium.url.host=' + env.CipHostname,
						resolverId: "MAVEN_RESOLVER"
					)
				}
			}
		}
		stage("Generate Allure Reports") {
			steps {
				script {	
					dir ('foundationBddTests/target') {
						allure([
                            includeProperties: false,
                            jdk: '',
                            properties: [[key: 'url', value: '${env.CipHostname}']],
                            reportBuildPolicy: 'ALWAYS',
                            results: [[path: 'allure-results']]
						])
					}
				}                
			}
		}
	}
	post {
        always {
            script {
                currentBuild.result = currentBuild.result ?: 'SUCCESS'
                notifyBitbucket(considerUnstableAsSuccess: true)
            }
        }
    }
}